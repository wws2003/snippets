from typing import List
import time
import numpy as np

class Solution:
    def maxProfit(self, k: int, org_prices: List[int]) -> int:
        # Remove duplicate prices
        prices = []
        prices.append(org_prices[0])
        last_price = org_prices[0]
        for price in org_prices[1:]:
            if price != last_price:
                prices.append(price)
                last_price = price

        # Find the proper start
        start_index = 0
        element_count = len(prices)
        for i in range(element_count):
            if i == element_count - 1 or prices[i] < prices[i + 1]:
                start_index = i
                break
        
        prices = prices[start_index:]
        if not prices:
            return 0

        # Actual work
        element_count = len(prices)
        last_element = element_count - 1
        kplus1 = k + 1
        
        # Calculate profit by at most k transactions
        profits = {}
        for i in range(last_element - 1, -1, -1):
            profits[i] = {}
            profits_i = profits[i]
            price_i = prices[i]
            next_i = i + 1

            # j = i + 1
            j = i + 1
            delta = prices[j] - price_i
            profits_i[j] = np.zeros((kplus1, 2), dtype=np.int32)
            p20 = max(0, delta)
            p21 = max(0, -delta)
            profits_i[j][1:, :] = [p20, p21]

            # j = i + 2
            j = i + 2
            if j >= element_count:
                continue
            
            prev_j = j - 1
            profits_i[j] = np.zeros((kplus1, 2), dtype=np.int32)
            profits_ij = profits_i[j]
            profits_nexti_j = profits[next_i][j]
            profits_i_prevj = profits[i][prev_j]
            delta = prices[j] - price_i

            profits_ij[1:, 0] = np.maximum(profits_nexti_j[1:, 0], np.maximum(profits_i_prevj[1:, 0], delta))
            profits_ij[1:, 1] = np.maximum(profits_nexti_j[1:, 1], np.maximum(profits_i_prevj[1:, 1], -delta))

            # j > i + 2
            profits_nexti = profits[next_i]
            for j in range(i + 3, element_count):
                # Potential profit from i to j, inclusive
                prev_j = j - 1
                profits_i[j] = np.zeros((kplus1, 2), dtype=np.int32)
                profits_ij = profits_i[j]
                profits_nexti_j = profits_nexti[j]
                profits_i_prevj = profits_i[prev_j]
                delta = prices[j] - price_i
                profits_nexti_prevj = profits_nexti[prev_j]

                # m >= 1
                profits_ij[1:, 0] = np.maximum(profits_nexti_j[1:, 0], np.maximum(profits_i_prevj[1:, 0], profits_nexti_prevj[0:-1, 1] + delta))
                profits_ij[1:, 1] = np.maximum(profits_nexti_j[1:, 1], np.maximum(profits_i_prevj[1:, 1], profits_nexti_prevj[0:-1, 0] - delta))

                del profits_nexti[prev_j]
      
            del profits[i + 1]
            
        return self._get_potential_profit(0, last_element, k, 0, profits)
    
    def _get_potential_profit(self, i, j, m, l, profits):
        if j <= i:
            return 0
        if m <= 0:
            return 0
        return int(profits[i][j][m][l])
    
if __name__ == '__main__':
    prices
    k = 100
    solution = Solution()         
    start_time = time.process_time()
    result = solution.maxProfit(k, prices)
    end_time = time.process_time()

    print("Result:", result)
    print("Process time:", end_time - start_time, "seconds")